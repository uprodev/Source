//-----------------------------------------------
// Gradients
//-----------------------------------------------

@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	// background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

//-----------------------------------------------
// Font Sizing
//-----------------------------------------------

@function calculateRem($size) {
	$remSize: divide($size, 16px);
	@return #{$remSize}rem;
}

@mixin fontSize($size) {
	font-size: $size; //Fallback in px
	font-size: calculateRem($size);
}

@mixin letterSpacing($spacing) {
	letter-spacing: divide($spacing, 1000) * 1em;
}

@function strip-unit($value) {
	@return divide($value, ($value * 0 + 1));
}

@mixin fluidType($min-vw, $max-vw, $min-font-size, $max-font-size) {
	$u1: unit($min-vw);
	$u2: unit($max-vw);
	$u3: unit($min-font-size);
	$u4: unit($max-font-size);

	@if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
		& {
			font-size: $min-font-size;
			@media screen and (min-width: $min-vw) {
				font-size: calc(#{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
			}
			@media screen and (min-width: $max-vw) {
				font-size: $max-font-size;
			}
		}
	}
}

//-----------------------------------------------
// Viewport Heights
//-----------------------------------------------

@mixin jvhMinHeight() {
	min-height: 100vh;
	min-height: calc(var(--vh, 1vh) * 100);
}

@mixin jvhHeight() {
	height: 100vh;
	height: calc(var(--vh, 1vh) * 100);
}

@mixin jvhHeightResize() {
	height: 100vh;
	height: calc(var(--vhr, 1vh) * 100);
}

//-----------------------------------------------
// Aspect Box
//-----------------------------------------------

@mixin aspectBox($width, $height) {
	&:after {
		content: '';
		display: block;
		padding-top: calc(#{$height} / #{$width} * 100%);
	}
}

//-----------------------------------------------
// Common styles
//-----------------------------------------------

@mixin textLink() {
	border-bottom: 1px solid lighten($colour_text_link, 40%);
	color: $colour_text_link;

	&:focus,
	&:hover {
		border-bottom: 1px solid $colour_text_link;
		color: darken($colour_text_link, 10%);
	}
}

//-----------------------------------------------
// Debugging
//-----------------------------------------------

@mixin outline($color: gold, $type: solid) {
	border: 1px $type $color;
}

// Debug Box
@mixin db() {
	@include outline(rgba(114, 114, 114, 1), dotted);
}